
BusMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006a8  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db7  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005d0  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000580  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f6  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <USART_init>:
 *	ubrr is the UBRR, a function of the clock rate and baud rate, ase defined in the datasheet
 *	This code almost identical to the example code from the datashheet.
 */
void USART_init(unsigned int ubrr){

	UBRR0H = (unsigned char) (ubrr >> 8);	//set UBRRH to the first 8 bits of ubrr
  88:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;		//set UBRRL to the last 8 bits of ubrr
  8a:	89 b9       	out	0x09, r24	; 9

	UCSR0B = (1 << RXEN0) | (1 << TXEN0); 	//Enable receiver and transmiter
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10

	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);	//set frame format: 8 data 2 stop bit.	
  90:	8e e8       	ldi	r24, 0x8E	; 142
  92:	80 bd       	out	0x20, r24	; 32
  94:	08 95       	ret

00000096 <USART_transmit>:
 * 	data is what to be transfered.
 *	This code is similar if not identical to the example code in the datasheet.
 */
void USART_transmit(unsigned int data){

	while (!(UCSR0A & (1<<UDRE0)))		// Wait until the data is receied
  96:	5d 99       	sbic	0x0b, 5	; 11
	UDR0 = data;				// Put data into the buffer, which sends it.
}
  98:	08 95       	ret
	UDR0 = data;				// Put data into the buffer, which sends it.
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	fc cf       	rjmp	.-8      	; 0x96 <USART_transmit>

0000009e <USART_receive>:
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	8c b1       	in	r24, 0x0c	; 12
  a2:	08 95       	ret

000000a4 <main>:
	DDRB = 0x00;
  a4:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 bb       	out	0x14, r24	; 20
	PORTB |= 0xAB;
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8b 6a       	ori	r24, 0xAB	; 171
  ae:	88 bb       	out	0x18, r24	; 24
	cli();
  b0:	f8 94       	cli
	USART_init(myUBRR);
  b2:	63 e3       	ldi	r22, 0x33	; 51
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 44 00 	call	0x88	; 0x88 <USART_init>
	sei();
  be:	78 94       	sei
		USART_transmit(7);		
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <USART_transmit>
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <main+0x1c>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
